# Port of call events
CONSTRUCT {
	?ar_event_uri rdf:type Event:CallEvent;
	Event:involvesEvent ?ar_event,?dep_event, ?inbetween_event .

    # include all existing attributes of the selected Events
    ?ar_event ?pred ?subj .
    ?dep_event ?pred1 ?subj1 .
    ?inbetween_event ?pred2 ?subj2 .



}
WHERE {
	# Get the arrival and departure events
    ?ar_event_class rdfs:subClassOf Event:ArrivalEvent .
	?ar_event rdf:type ?ar_event_class .
	?dep_event_class rdfs:subClassOf Event:DepartureEvent .
	?dep_event rdf:type ?dep_event_class .

    # create a new URI based on the identity of the ar_event
    # afterall each PoC event is uniquely identified by its ATAEvent
    BIND ( URI( CONCAT (STR(?ar_event), STR(UUID()) ) )  as ?ar_event_uri ) .

	# Arrival and departure event must have same transport means
	?ar_event Event:involvesDigitalTwin ?tpm .
	?dep_event Event:involvesDigitalTwin ?tpm .
	
	# Arrival and departure event must have same location
	?ar_event Event:involvesPhysicalInfrastructure ?loc .
	?dep_event Event:involvesPhysicalInfrastructure ?loc .

	# Arrival event must occur before departure event
	?ar_event Event:hasTimestamp ?ar_time .
	?dep_event Event:hasTimestamp ?dep_time .
	FILTER (?ar_time < ?dep_time)

	
	# Get the Load and Discharge events inbetween Arrival and Discharge
	OPTIONAL {
	  ?inbetween_event rdf:type ?type
	  FILTER(?type in (Event:LoadEvent, Event:DischargeEvent)) .
	  ?inbetween_event Event:involvesDigitalTwin ?in_tpm .
	  ?inbetween_event Event:hasTimestamp ?in_time .
	  FILTER(?in_tpm = ?tpm) .
	  FILTER(?in_time > ?ar_time && ?in_time < ?dep_time) .

      # also collect the existing attributes of the event 
      ?inbetween_event ?pred2 ?subj2 .

	}
    
    # also collect existing attributes
    ?ar_event ?pred ?subj .
    ?dep_event ?pred1 ?subj1 .

	# Filter based on unique identifier for similar events (same location, same tpm)
}